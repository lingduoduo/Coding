class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        
        n = len(nums)
        s = sum(nums)
        
        if s % 2 != 0:
            return False
        
        dp = [0] * (s + 1)
        dp[0] = 1
        for num in nums:
            for i in range(s, -1, -1):
                if dp[i]:
                    dp[i+num] = 1
                    
            if dp[s//2]:
                return True
            
        return False


# class Solution(object):
#     def canPartition(self, nums) -> bool:
#         tot = sum(nums)
#         if tot%2 == 1:
#             return False

#         n = len(nums)
#         for i in range(1<<n):
#             tmp = []
#             par = 0
#             for j in range(n):
#                 if 1<<j & i > 0 :
#                     par += nums[j]
#                     if par > tot/2:
#                         continue
#                     tmp.append(nums[j])
#             if sum(tmp) == tot/2:
#                 return True

#         return False


if __name__ == '__main__':
    # nums = [1,5,11,5]
    # res = Solution().canPartition(nums)
    # print(res)

    nums
    res = Solution().canPartition(nums)
    print(res)   
            